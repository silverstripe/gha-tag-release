name: Tag and release
description: GitHub Action to create a tag and an optional release
inputs:
  sha:
    type: string
    required: true
  tag:
    type: string
    required: true
  delete_existing:
    type: boolean
    required: false
    default: false
  release:
    type: boolean
    required: false
    default: false
  body:
    type: string
    required: false
    default: ''
runs:
  using: composite
  steps:

    - name: Delete existing release if one exists
      if: ${{ inputs.release == 'true' && inputs.delete_existing == 'true' }}
      shell: bash
      env:
        TAG: ${{ inputs.tag }}
      run: |
        echo "Deleting old release for $TAG if it exists"
        # Get id for an existing release matching $TAG
        curl -s \
        -X GET https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG \
        -H "Accept: application/vnd.github.v3+json" > __.json
        RELEASE_ID=$(jq .id __.json)
        if [ "$RELEASE_ID" != "null" ]; then
          curl -s \
          -X DELETE https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ github.token }}"
          echo "Deleted existing release $RELEASE_ID for tag $TAG"
        else
          echo "Could not find an existing release for tag $TAG"
        fi

    - name: Delete existing tag if one exists
      if: ${{ inputs.delete_existing == 'true' }}
      shell: bash
      # Add string inputs to memory instead of using string substitution in shell script
      # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
      env:
        TAG: ${{ inputs.tag }}
      run: |
        echo "Deleting old $TAG tag if it exists"
        # Delete tag via GitHub API
        # https://docs.github.com/en/rest/reference/git#delete-a-reference
        curl -s \
        -X DELETE https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$TAG \
        -H "Accept: application/vnd.github.v3+json" \
        -H "Authorization: token ${{ github.token }}"

    - name: Create tag
      if: ${{ inputs.release == 'false' }}
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/${{ inputs.tag }}',
            sha: ${{ inputs.sha }}
          })

    # - name: Create tag
    #   if: ${{ inputs.release == 'false' }}
    #   shell: bash
    #   env:
    #     SHA: ${{ inputs.sha }}
    #     TAG: ${{ inputs.tag }}
    #   run: |
    #     # TODO: remove
    #     # SHA=${{ github.sha }}
    #     echo "SHA is $SHA"
    #     echo "TAG is $TAG"
    #     echo "url is https://api.github.com/repos/${{ github.repository }}/git/refs"
    #     # Create new tag via GitHub API
    #     # https://docs.github.com/en/rest/reference/git#create-a-reference
    #     curl -s \
    #     -X POST https://api.github.com/repos/${{ github.repository }}/git/refs \
    #     -H "Accept: application/vnd.github.v3+json" \
    #     -H "Authorization: token ${{ github.token }}" \
    #     -d @- << EOF
    #     {
    #       "sha": "$SHA",
    #       "ref": "refs/tags/$TAG"
    #     }
    #     EOF
    #     echo "New tag $TAG created for sha $SHA"

    # Creating a release will also create a tag
    - name: Create release
      if: ${{ inputs.release == 'true' }}
      shell: bash
      env:
        SHA: ${{ inputs.sha }}
        TAG: ${{ inputs.tag }}
        BODY: ${{ inputs.body }}
      run: |
        # Create new release via GitHub API
        # https://docs.github.com/en/rest/reference/releases#create-a-release
        # Escape double quotes '"' => '\"'
        BODY=${BODY//\"/\\\"}
        curl -s \
        -X POST https://api.github.com/repos/${{ github.repository }}/releases \
        -H "Accept: application/vnd.github.v3+json" \
        -H "Authorization: token ${{ github.token }}" \
        -d @- << EOF
        {
          "tag_name": "$TAG",
          "target_commitish": "$SHA",
          "name": "$TAG",
          "body": "$BODY",
          "draft": false,
          "prerelease": false
        }
        EOF
        echo "New release $TAG created"
# ^ todo: test inputs.body with a single double quote in it